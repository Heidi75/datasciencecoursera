1. 
Question 1
There will be an object called 'iris' in your workspace. In this dataset, what is the mean of 'Sepal.Length' for the species virginica? Please round your answer to the nearest whole number.
Answer 7
Ex 
Different ways to split the data
'Sepal.Length' for the species virginica?
Using Which and $ ( identifies rows and columns of database )
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
Explanation:
The which function creates an index for virginica species, the $ operator singles out the Sepal.Length column, then the mean and round function do the rest.
Using Split and Sapply and $ ( identifies rows and columns of database )
Sapply(split(iris$Sepal.Length, iris$Species), mean)
Return : Setosa     versicolor    virginica
5.006	    5.936	6.588
Change 
Sapply(split(iris$Sepal.Length, iris$Species==”virginica”),mean)
Must round to nearest whole number
round(Sapply(split(iris$Sepal.Length, iris$Species==”virginica”),mean))
$ ( identifies rows and columns of database )
round(mean(iris[iris$Species == "virginica",]$Sepal.Length))
USING TAPPLY 
 
tapply(iris$Sepal.Length,iris$Species,mean)
Returns all species
Needs to specify species
tapply(iris$Sepal.Length,
iris$Species=="virginica", mean)
Must Round
round(tapply(iris$Sepal.Length,
iris$Species=="virginica", mean))
 

Question 2
 
Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?

Apply mean function over 4 rows

apply(X, MARGIN, FUN)
apply(iris, 2, mean)

I forgot to put the range of the rows because there is more than 4 row

apply(iris[, 1:4], 2, mean)
> library(datasets)
> data(iris)
> apply(iris[, 1:4], 2, mean)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
    5.843333     3.057333     3.758000     1.199333
WRONG ANSWERS
apply(iris, 1, mean) -> "Vector with NA";


apply(iris, 2, mean) -> "Warning messages: 1: In mean.default(newX[, i], ...) : "argument is not numeric or logical: returning NA";



colMeans(iris) -> "Error in colMeans(iris) : 'x' must be numeric";




Question 3
Load the 'mtcars' dataset in R with the following code
How can one calculate the average miles per gallon (mpg) by the number of cylinders in the car (cyl)? Select all that apply.

Mpg and cyl are first two columns of the dataset
The rows are the names of all the cars

Mean = the function for average

How many different types of cylinders are their?

Then for each Cylinder Type calculate the average miles per gallon
Working
First option
with(mtcars, tapply(mpg, cyl, mean))
Returns
  4        6        8 
26.66364 19.74286 15.10000 

Second option
> tapply(mtcars$mpg, mtcars$cyl, mean)
       4        6        8 
26.66364 19.74286 15.10000

Third option
 sapply(split(mtcars$mpg, mtcars$cyl), mean)
       4        6        8 
26.66364 19.74286 15.10000


Not working
> mean(mtcars$mpg, mtcars$cyl)
Error in mean.default(mtcars$mpg, mtcars$cyl) : 
  'trim' must be numeric of length one

> sapply(mtcars, cyl, mean)
Error in match.fun(FUN) : object 'cyl' not found

> apply(mtcars, 2, mean)
       mpg        cyl       disp         hp       drat         wt       qsec 
 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 
        vs         am       gear       carb 
  0.437500   0.406250   3.687500   2.812500 

Error in apply(cyl, 2, mean) : object 'cyl' not found
> apply(mtcars$mpg, 2, mean)
Error in apply(mtcars$mpg, 2, mean) : dim(X) must have a positive length
> apply(mtcars$mpg, 1, mean)
Error in apply(mtcars$mpg, 1, mean) : dim(X) must have a positive length

> lapply(mtcars, mean)
$mpg
[1] 20.09062

$cyl
[1] 6.1875

$disp
[1] 230.7219

$hp
[1] 146.6875

$drat
[1] 3.596563

$wt
[1] 3.21725

$qsec
[1] 17.84875

$vs
[1] 0.4375

$am
[1] 0.40625

$gear
[1] 3.6875

$carb
[1] 2.8125

 tapply(mtcars$cyl, mtcars$mpg, mean)
10.4 13.3 14.3 14.7   15 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7   21 
   8    8    8    8    8    8    8    8    8    8    6    6    8    7    6    6 
21.4 21.5 22.8 24.4   26 27.3 30.4 32.4 33.9 
   5    4    4    4    4    4    4    4    4 


> split(mtcars, mtcars$cyl)
$`4`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2

$`6`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6

$`8`
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8



Question 4

Continuing with the 'mtcars' dataset from the previous Question, what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?

Answer 127 Round  -  the process below is incomplete as the answer returned the following
although it gives us as much information needed to solve ... the answer is complete if
it was rounded before the function which we can use round() but also it must only have one answer under True which this answer returned
two answers.... So how to make a function in one line which can return the one answer rounded up?    Any ideas?

All answers return
   FALSE      TRUE 
 82.18254 126.57792 


From before we calculated the average miles per gallon per cylinder
So let's change these functions to average horsepower per cylinder
Found hp label for row horsepower by using head(mtcars)

3 options
sapply(split(mtcars$hp, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
with(mtcars, tapply(hp, cyl, mean))

This should return all 3 cylinders
Now we want to get only 2
4 cylinder and 8 cylinder

You can put the results in a new array and split then subtract
But we want to put into one function
abs(sapply(split(mtcars$hp, mtcars$cyl==4), mean)-sapply(split(mtcars$hp, mtcars$cyl==8), mean))
abs(tapply(mtcars$hp, mtcars$cyl==4, mean)-tapply(mtcars$hp, mtcars$cyl==8, mean))
abs(with(mtcars, tapply(hp, cyl==4, mean))-with(mtcars, tapply(hp, cyl==8, mean)))

All answers return
   FALSE      TRUE 
 82.18254 126.57792 



Then we want to find absolute ( 4 cyl - 8 cyl ) 

( Some ideas from others )
x4 <- mtcars[,"cyl"] == 4
x8 <- mtcars[,"cyl"] == 8
abs(mean(mtcars[,"hp"][x4]) - mean(mtcars[,"hp"][x8]))
[1] 126.5779




abs(tapply(mtcars\$hp,mtcars\$cyl==4,mean)[2] - tapply(mtcars\$hp,mtcars\$cyl==8,mean)[2])

























